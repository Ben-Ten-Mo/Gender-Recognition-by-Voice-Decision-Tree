{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO/j3ANpqqKA5wr0q5KgrQB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kCOJrjLcQrZ5","executionInfo":{"status":"ok","timestamp":1684842826093,"user_tz":240,"elapsed":4704,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import accuracy_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import cross_validate\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn import preprocessing\n","from sklearn.model_selection import validation_curve\n","from sklearn.linear_model import Ridge\n","from sklearn.tree import DecisionTreeClassifier"]},{"cell_type":"code","source":["voices = pd.read_csv(\"voice.csv\")\n","\n","Gender_mapping = {'male':0, 'female':1}\n","voices = voices.replace({'label':Gender_mapping})\n","\n","voices = voices.drop([\"maxdom\",\"mindom\", \"dfrange\", \"meandom\", \"mode\", \"maxfun\", \"minfun\", \"modindx\", \"skew\",\"Q75\",\"kurt\"],axis = 1)\n","voices = voices.dropna()\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","features = ['meanfreq','sd','median','Q25','IQR','sp.ent','sfm','centroid','meanfun']\n","voices[features] = scaler.fit_transform(voices[features].to_numpy())\n","\n","from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor(random_state = 42)\n","from pprint import pprint\n","# Look at parameters used by our current forest\n","print('Parameters currently in use:\\n')\n","pprint(rf.get_params())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UrKrfZHFJo8u","executionInfo":{"status":"ok","timestamp":1684842864628,"user_tz":240,"elapsed":626,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"630b22ac-8206-4f5e-d20e-825d27c9e1df"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Parameters currently in use:\n","\n","{'bootstrap': True,\n"," 'ccp_alpha': 0.0,\n"," 'criterion': 'squared_error',\n"," 'max_depth': None,\n"," 'max_features': 1.0,\n"," 'max_leaf_nodes': None,\n"," 'max_samples': None,\n"," 'min_impurity_decrease': 0.0,\n"," 'min_samples_leaf': 1,\n"," 'min_samples_split': 2,\n"," 'min_weight_fraction_leaf': 0.0,\n"," 'n_estimators': 100,\n"," 'n_jobs': None,\n"," 'oob_score': False,\n"," 'random_state': 42,\n"," 'verbose': 0,\n"," 'warm_start': False}\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Number of features to consider at every split\n","max_features = ['auto', 'sqrt']\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators,\n","               'max_features': max_features,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","pprint(random_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mrS0sFXiJ7M2","executionInfo":{"status":"ok","timestamp":1684842869045,"user_tz":240,"elapsed":252,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"fe579cb5-4d7d-4ee9-e89a-7ff8e4615f36"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["{'bootstrap': [True, False],\n"," 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 5, 10],\n"," 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n"]}]},{"cell_type":"code","source":["X = voices.drop(['label'],axis=1)\n","y = voices['label']\n","\n","# List of features for later use\n","feature_list = list(X.columns)\n","# Convert to numpy arrays\n","import numpy as np\n","X = np.array(X)\n","y = np.array(y)\n","\n","# Training and Testing Sets\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 42, stratify = y)"],"metadata":{"id":"CXBkpUn2L3zg","executionInfo":{"status":"ok","timestamp":1684842873225,"user_tz":240,"elapsed":177,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestRegressor()\n","# Random search of parameters, using 5 fold cross validation, \n","# search across 50 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"id":"abSE1UneKIOH","executionInfo":{"status":"ok","timestamp":1684843693716,"user_tz":240,"elapsed":343614,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"33d60233-8e7b-4dd9-a004-858f32060105"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'max_features': ['auto', 'sqrt'],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n","                                        &#x27;n_estimators&#x27;: [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n","                                        &#x27;n_estimators&#x27;: [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["rf_random.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nj8lDWWcKpom","executionInfo":{"status":"ok","timestamp":1684843693717,"user_tz":240,"elapsed":13,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"14c805e7-90e4-484f-c73d-f27b95d39b48"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'n_estimators': 1400,\n"," 'min_samples_split': 5,\n"," 'min_samples_leaf': 1,\n"," 'max_features': 'sqrt',\n"," 'max_depth': 30,\n"," 'bootstrap': True}"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["rf_random.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fIiu7Fddd8hY","executionInfo":{"status":"ok","timestamp":1684843693718,"user_tz":240,"elapsed":9,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"a02a06de-015a-48e0-eff0-bc3a29ee53ed"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.931900621394014"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["rf_random.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"id":"5UsHLXxad-Kd","executionInfo":{"status":"ok","timestamp":1684843693965,"user_tz":240,"elapsed":254,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"9fa0c366-df9f-46fb-adb9-bee756250061"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(max_depth=30, max_features='sqrt', min_samples_split=5,\n","                      n_estimators=1400)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=30, max_features=&#x27;sqrt&#x27;, min_samples_split=5,\n","                      n_estimators=1400)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=30, max_features=&#x27;sqrt&#x27;, min_samples_split=5,\n","                      n_estimators=1400)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    errors = abs(predictions - test_labels)\n","    mape = 100 * np.mean(errors / test_labels)\n","    print(\"Test_Labels: %s\"%test_labels)\n","    print(\"Mape: %s\"%mape)\n","\n","    accuracy = 100 - mape\n","    print('Model Performance')\n","    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    \n","    return accuracy\n","base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\n","base_model.fit(X_train, y_train)\n","base_accuracy = evaluate(base_model, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D9WdqKlaK2Jw","executionInfo":{"status":"ok","timestamp":1684113436372,"user_tz":240,"elapsed":386,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"0497bf1c-63eb-4641-aabc-fa4a758c8321"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test_Labels: [0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 0 1 1 0 0 1 0 1 0 1 0 0 0 1 1 0 1 1 0 1 0 1\n"," 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 1 1 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0\n"," 0 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1\n"," 1 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 1 0 1 1 1 0 1\n"," 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 0 0 0 1\n"," 1 1 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 1 0 1 1 1\n"," 0 0 0 1 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1\n"," 0 1 0 0 0 0 0 1 1 0 0 0 1 1 0 0 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0\n"," 0 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 0 0 1 1 1\n"," 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 0 1 0 0 1\n"," 0 0 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 1 0 1 1\n"," 1 0 1 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 1 0\n"," 1 1 0 0 1 1 1 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1\n"," 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0\n"," 1 1 0 0 1 1 0 0 1 1 1 1 0 1 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0\n"," 0 1 1 1 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 1\n"," 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 1 1 1 1 0 1\n"," 0 1 1 0 1]\n","Mape: nan\n","Model Performance\n","Average Error: 0.0424 degrees.\n","Accuracy = nan%.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-47-ba6660942985>:4: RuntimeWarning: divide by zero encountered in true_divide\n","  mape = 100 * np.mean(errors / test_labels)\n","<ipython-input-47-ba6660942985>:4: RuntimeWarning: invalid value encountered in true_divide\n","  mape = 100 * np.mean(errors / test_labels)\n"]}]},{"cell_type":"code","source":["best_random = rf_random.best_estimator_\n","random_accuracy = evaluate(best_random, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J4CvF83dK5Vq","executionInfo":{"status":"ok","timestamp":1684113443233,"user_tz":240,"elapsed":696,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"3e6efd81-f109-44f1-e513-ba0a57accd11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test_Labels: [0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 0 1 1 0 0 1 0 1 0 1 0 0 0 1 1 0 1 1 0 1 0 1\n"," 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 1 1 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0\n"," 0 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1\n"," 1 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 1 0 1 1 1 0 1\n"," 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 0 0 0 1\n"," 1 1 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 1 0 1 1 1\n"," 0 0 0 1 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1\n"," 0 1 0 0 0 0 0 1 1 0 0 0 1 1 0 0 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0\n"," 0 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 0 0 1 1 1\n"," 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 0 1 0 0 1\n"," 0 0 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 1 0 1 1\n"," 1 0 1 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 1 0\n"," 1 1 0 0 1 1 1 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1\n"," 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0\n"," 1 1 0 0 1 1 0 0 1 1 1 1 0 1 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0\n"," 0 1 1 1 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 1\n"," 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 1 1 1 1 0 1\n"," 0 1 1 0 1]\n","Mape: nan\n","Model Performance\n","Average Error: 0.0457 degrees.\n","Accuracy = nan%.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-47-ba6660942985>:4: RuntimeWarning: divide by zero encountered in true_divide\n","  mape = 100 * np.mean(errors / test_labels)\n","<ipython-input-47-ba6660942985>:4: RuntimeWarning: invalid value encountered in true_divide\n","  mape = 100 * np.mean(errors / test_labels)\n"]}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iyHyrIJPK7Ka","executionInfo":{"status":"ok","timestamp":1684113465713,"user_tz":240,"elapsed":354,"user":{"displayName":"Benjamin Wang _ Student - EnloeHS","userId":"01527777632711439078"}},"outputId":"ca723a38-ccca-4af9-b469-5a9da56a418b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of nan%.\n"]}]}]}